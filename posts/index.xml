<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on hrhr49 blog</title><link>https://hrhr49.github.io/memo/posts/</link><description>Recent content in Posts on hrhr49 blog</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © hrhr49; all rights reserved.</copyright><lastBuildDate>Mon, 21 Sep 2020 09:02:15 +0900</lastBuildDate><atom:link href="https://hrhr49.github.io/memo/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Noto Sansフォントを使ってみた</title><link>https://hrhr49.github.io/memo/posts/font-noto-sans/</link><pubDate>Mon, 21 Sep 2020 09:02:15 +0900</pubDate><guid>https://hrhr49.github.io/memo/posts/font-noto-sans/</guid><description>このブログで使用しているフォントを Noto Sans CJK JP に変更したので、その時のメモ。
Noto Sans CJK JPとは Googleが作っているフォント。日本語がきれい。
https://www.google.com/get/noto/#mono-mono
注意 このフォントをそのまま使用すると、ファイルサイズが大きすぎる。 この問題を解消するため、サブセット化済みのフォントを用いる。
サブセット化とは 必要ない文字を削除してフォントのサイズを軽量化すること。 とりあえずは JISの第一水準の漢字が使えればほとんどのケースで困らない。
サブセット化済みのフォント 以下のURLでサブセット化済みの Noto Sans が提供されていたので、ありがたく使わせてもらった。
https://github.com/axcelwork/Noto-Snas-subset
Hugoで使用するには このブログはHugoというツールを使用して作成している。 特に、テーマとして hugo-clarity を使用している。 そのため、このテーマで使用されているフォントを Noto Sans に変更する必要があった。
最終的に、このテーマを色々いじりたかったので、このブログのリポジトリ内にテーマファイルを直置きしてブログ記事と一緒にバージョン管理するようにした(ちゃんとやるならforkするなどして別に管理したほうがいい気もするが&amp;hellip;)</description></item><item><title>Asciinemaの使い方</title><link>https://hrhr49.github.io/memo/posts/asciinema/</link><pubDate>Sun, 20 Sep 2020 00:42:49 +0900</pubDate><guid>https://hrhr49.github.io/memo/posts/asciinema/</guid><description>Asciinemaとは コンソールの操作を記録・再生するためのツール。 記録した内容を、以下のようにHTMLファイルに動画として埋め込むこともできる。
インストール homebrewでインストールできる。
1brew install asciinema アカウントの作成・使い方 以下のURLを参照。
Asciinemaを試す
詰まったところ HugoでAsciinemaの埋め込み動画が表示されない このブログはHugoという静的サイトジェネレータを使用しているが、Asciinemaの埋め込み動画を使用するには設定が必要。
Markdownファイル内でHTMLタグを有効化するために、設定ファイルを修正する。 以下の内容を config.toml に加える。
1[markup] 2 [markup.goldmark] 3 [markup.goldmark.renderer] 4 unsafe = true 参考: https://budougumi0617.github.io/2020/03/10/hugo-render-raw-html/</description></item><item><title>fzfの使い方</title><link>https://hrhr49.github.io/memo/posts/fzf/</link><pubDate>Sat, 19 Sep 2020 23:45:20 +0900</pubDate><guid>https://hrhr49.github.io/memo/posts/fzf/</guid><description>fzfとは インクリメンタルにあいまい検索で絞り込みを行うためのコマンドラインツール。 GitHubのページ
以下の動画を見てもらえば、どういったものかわかりやすい。
fzf コマンドは、標準入力に受け取ったテキストを絞り込んだ結果を標準出力に流す。 そのため、他のコマンドと簡単に連携できるのでとても強力。
なお、標準入力無しでコマンドを実行した際は、 （再帰的に）現在のディレクトリ配下のファイルすべて の中から候補を絞り込むことができる。
上記の例では、 fzf で絞り込んだファイルをvimで開いている。
インストール homebrewもしくはlinuxbrewでインストールする場合 1brew install fzf 2 3# シェルでのキーバインドや補完機能を使用する場合は以下を実行する 4$(brew --prefix)/opt/fzf/install aptを使う場合 Ubuntu バージョン20以上だと、aptでインストールもできるようになっている。 ただ、こっちだとバージョンが古くなりがちなので最新のものを使いたい場合はbrewの方を使う。
1sudo apt install fzf キーバインドなどを有効化したいときにはbashrcやzshrcに以下を記載する。
bashの場合は~/.bashrcに以下を追加。
1source /usr/share/doc/fzf/examples/completion.bash 2source /usr/share/doc/fzf/examples/key-bindings.bash zshの場合は~/.zshrcに以下を追加。
1source /usr/share/doc/fzf/examples/completion.zsh 2source /usr/share/doc/fzf/examples/key-bindings.zsh 参考： https://github.com/junegunn/fzf/issues/1866
キーバインド &amp;lt;C-t&amp;gt; : ディレクトリやファイル名補完 &amp;lt;C-r&amp;gt; : コマンド履歴 &amp;lt;M-c&amp;gt; : 選択したディレクトリへcd 検索に使える特殊記号 'hoge : hogeを含む文字列 ^hoge : hogeが先頭にある文字列 hoge$ : hogeが末尾にある文字列 !hoge : hogeを含まない文字列 !</description></item><item><title>Dockerの使い方</title><link>https://hrhr49.github.io/memo/posts/docker/</link><pubDate>Sat, 19 Sep 2020 17:55:26 +0900</pubDate><guid>https://hrhr49.github.io/memo/posts/docker/</guid><description>Dockerメモ Dockerのインストール どうやら、種類がいろいろあってdocker-ceはdockerの公式がサポートしていて、 docker.ioはUbuntuがサポートしているみたい。 docker.ioに関しては以下のようにしてインストールできた。
1sudo apt install docker.io Dockerに合わせてdocker-composeも一緒にインストールしておくと便利。 これを入れておくと、コンテナの構成管理などが便利らしい。
1sudo apt isntall docker-compose DockerでHello World 以下のコマンドで hello-world のDockerイメージからコンテナを起動できる。 もしこのイメージがまだローカルにダウンロードされていない場合、 Docker Hubからイメージをダウンロードした後に実行される。
1docker run hello-world このコマンドを実行すると以下のようなメッセージが表示される。
1Hello from Docker! 2This message shows that your installation appears to be working correctly. 3... 4略 簡単なDockerイメージを作る 自分用のdotfiles(各種設定ファイル)をインストールするスクリプトをコンテナ内で実行するための Dockerfileを作って動かしてみたのでその時のメモ。 (インストールスクリプトといっても、各種設定ファイルを、 ホームディレクトリなどにシンボリックリンク張るだけですが&amp;hellip;)
以下のURLにおいてある。(注意：将来的に内容が変わっている可能性あり。)
https://github.com/hrhr49/dotfiles/blob/master/Dockerfile
補足： Dockerfileを使わずに、Dockerコンテナからイメージを作成することも可能。 しかし、この方法だと設定に何を行ったかがわかりづらくなってしまうので今回はこの方法を採用しなかった。
Dockerfileを作る 最終的に以下のような内容のものになった。
1FROMubuntu:20.0423# インタラクティブな選択画面を使用しない4ENV DEBIAN_FRONTEND=noninteractive 5 6# 先にtzdataを入れないと、タイムゾーンの選択画面が出てしまう(Ubuntu18.04以降)7# https://qiita.com/yagince/items/deba267f789604643bab8RUN apt-get -y update &amp;amp;&amp;amp; \ 9 apt-get -y install \ 10 tzdata1112# Build Environment13RUN apt-get -y update &amp;amp;&amp;amp; \ 14apt-get -y install \ 15 language-pack-ja-base \ 16 language-pack-ja \ 17 sudo1819# Utility20RUN apt-get -y update &amp;amp;&amp;amp; \ 21apt-get -y install \ 22 python3 \ 23 wget \ 24 curl \ 25 zip \ 26 unzip \ 27 git2829# 日本語の文字化けなどを回避30RUN locale-gen en_US.</description></item><item><title>Textlintの使い方</title><link>https://hrhr49.github.io/memo/posts/textlint/</link><pubDate>Tue, 15 Sep 2020 21:52:48 +0900</pubDate><guid>https://hrhr49.github.io/memo/posts/textlint/</guid><description>textlintメモ 文章の校正ツール。Node.jsの環境で動く。
インストール npmでインストールできる。
1npm -g install textlint 2# プリセットもインストールしておくと良い 3npm -g install textlint-rule-preset-ja-technical-writing 4npm -g install textlint-rule-spellcheck-tech-word 使い方 作業ディレクトリで textlint --init コマンドを実行すると、設定ファイル .textlintrc が生成されるので、それに設定を追加する。
1{ 2 &amp;#34;filters&amp;#34;: {}, 3 &amp;#34;rules&amp;#34;: { 4 &amp;#34;preset-ja-technical-writing&amp;#34;: true, 5 &amp;#34;spellcheck-tech-word&amp;#34;: true 6 } 7} その後、以下のコマンドで対象のファイルの校正結果を確認できる。
1textlint {ファイル名}</description></item><item><title>Hugoの使い方メモ</title><link>https://hrhr49.github.io/memo/posts/hugo/</link><pubDate>Mon, 14 Sep 2020 22:45:24 +0900</pubDate><guid>https://hrhr49.github.io/memo/posts/hugo/</guid><description>Hugoとは 静的サイトジェネレータと呼ばれるソフトウェアの一種 Go言語で作られているため、ビルドが高速らしい この技術ブログもHugoで作成したもの(Clarityテーマを使用) インストール MacやLinuxなら、 homebrew(linuxbrew)でインストールできる。
1brew install hugo サイトの作成方法 hugo new site {サイト名} で新規にサイトを作成できる。 このコマンドを実行すると、 ここで指定したサイト名と同名のディレクトリが作成される。
例)
1hugo new site memo テーマの追加 以下のコマンドを実行することで、すでに誰かが作ってくれているテーマを追加できる。
1cd {サイト名} # サイトのディレクトリへ移動 2git init 3git submodule add {テーマがあるリポジトリのURL} themes/{テーマの名前} 追加したテーマを使用するためには、サイトのディレクトリのルートにある config.toml (Hugoの設定ファイル) に以下の内容を追記する。
1theme = &amp;#34;{テーマ名}&amp;#34; 今回はClarityというテーマを使ったので 以下の手順を行った。
参考: https://github.com/chipzoller/hugo-clarity#getting-up-and-running
1cd memo 2git init 3git submodule add https://github.com/chipzoller/hugo-clarity themes/hugo-clarity 4cp -a themes/hugo-clarity/exampleSite/* . # ← config.tomlとかもexampleSiteをそのまま流用した コンテンツの追加 以下のコマンドを実行すると、 content/posts/{ファイル名}.md というファイルが自動生成される。 このファイルを編集していけば良い。</description></item></channel></rss>