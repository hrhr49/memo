<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tool on hrhr49 blog</title><link>https://hrhr49.github.io/memo/tags/tool/</link><description>Recent content in tool on hrhr49 blog</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © hrhr49; all rights reserved.</copyright><lastBuildDate>Sun, 20 Sep 2020 00:42:49 +0900</lastBuildDate><atom:link href="https://hrhr49.github.io/memo/tags/tool/index.xml" rel="self" type="application/rss+xml"/><item><title>Asciinemaの使い方</title><link>https://hrhr49.github.io/memo/posts/asciinema/</link><pubDate>Sun, 20 Sep 2020 00:42:49 +0900</pubDate><guid>https://hrhr49.github.io/memo/posts/asciinema/</guid><description>Asciinemaとは コンソールの操作を記録・再生するためのツール。 記録した内容を、以下のようにHTMLファイルに動画として埋め込むこともできる。
インストール homebrewでインストールできる。
1brew install asciinema アカウントの作成・使い方 以下のURLを参照。
Asciinemaを試す
詰まったところ HugoでAsciinemaの埋め込み動画が表示されない このブログはHugoという静的サイトジェネレータを使用しているが、Asciinemaの埋め込み動画を使用するには設定が必要。
Markdownファイル内でHTMLタグを有効化するために、設定ファイルを修正する。 以下の内容を config.toml に加える。
1[markup] 2 [markup.goldmark] 3 [markup.goldmark.renderer] 4 unsafe = true 参考: https://budougumi0617.github.io/2020/03/10/hugo-render-raw-html/</description></item><item><title>fzfの使い方</title><link>https://hrhr49.github.io/memo/posts/fzf/</link><pubDate>Sat, 19 Sep 2020 23:45:20 +0900</pubDate><guid>https://hrhr49.github.io/memo/posts/fzf/</guid><description>fzfとは インクリメンタルにあいまい検索で絞り込みを行うためのコマンドラインツール。 GitHubのページ
以下の動画を見てもらえば、どういったものかわかりやすい。
fzf コマンドは、標準入力に受け取ったテキストを絞り込んだ結果を標準出力に流す。 そのため、他のコマンドと簡単に連携できるのでとても強力。
なお、標準入力無しでコマンドを実行した際は、 （再帰的に）現在のディレクトリ配下のファイルすべて の中から候補を絞り込むことができる。
上記の例では、 fzf で絞り込んだファイルをvimで開いている。
インストール homebrewもしくはlinuxbrewでインストールする場合 1brew install fzf 2 3# シェルでのキーバインドや補完機能を使用する場合は以下を実行する 4$(brew --prefix)/opt/fzf/install aptを使う場合 Ubuntu バージョン20以上だと、aptでインストールもできるようになっている。 ただ、こっちだとバージョンが古くなりがちなので最新のものを使いたい場合はbrewの方を使う。
1sudo apt install fzf キーバインドなどを有効化したいときにはbashrcやzshrcに以下を記載する。
bashの場合は~/.bashrcに以下を追加。
1source /usr/share/doc/fzf/examples/completion.bash 2source /usr/share/doc/fzf/examples/key-bindings.bash zshの場合は~/.zshrcに以下を追加。
1source /usr/share/doc/fzf/examples/completion.zsh 2source /usr/share/doc/fzf/examples/key-bindings.zsh 参考： https://github.com/junegunn/fzf/issues/1866
キーバインド &amp;lt;C-t&amp;gt; : ディレクトリやファイル名補完 &amp;lt;C-r&amp;gt; : コマンド履歴 &amp;lt;M-c&amp;gt; : 選択したディレクトリへcd 検索に使える特殊記号 'hoge : hogeを含む文字列 ^hoge : hogeが先頭にある文字列 hoge$ : hogeが末尾にある文字列 !hoge : hogeを含まない文字列 !</description></item><item><title>Textlintの使い方</title><link>https://hrhr49.github.io/memo/posts/textlint/</link><pubDate>Tue, 15 Sep 2020 21:52:48 +0900</pubDate><guid>https://hrhr49.github.io/memo/posts/textlint/</guid><description>textlintメモ 文章の校正ツール。Node.jsの環境で動く。
インストール npmでインストールできる。
1npm -g install textlint 2# プリセットもインストールしておくと良い 3npm -g install textlint-rule-preset-ja-technical-writing 4npm -g install textlint-rule-spellcheck-tech-word 使い方 作業ディレクトリで textlint --init コマンドを実行すると、設定ファイル .textlintrc が生成されるので、それに設定を追加する。
1{ 2 &amp;#34;filters&amp;#34;: {}, 3 &amp;#34;rules&amp;#34;: { 4 &amp;#34;preset-ja-technical-writing&amp;#34;: true, 5 &amp;#34;spellcheck-tech-word&amp;#34;: true 6 } 7} その後、以下のコマンドで対象のファイルの校正結果を確認できる。
1textlint {ファイル名}</description></item></channel></rss>